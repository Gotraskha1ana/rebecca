*2
$6
SELECT
$1
0
*8
$4
EVAL
$559
--KEYS[1]: 限流 key
--ARGV[1]: 限流窗口,毫秒
--ARGV[2]: 当前时间戳（作为score）
--ARGV[3]: 阈值
--ARGV[4]: score 对应的唯一value
-- 1\. 移除开始时间窗口之前的数据
redis.call('zremrangeByScore', KEYS[1], 0, ARGV[2]-ARGV[1])
-- 2\. 统计当前元素数量
local res = redis.call('zcard', KEYS[1])
-- 3\. 是否超过阈值
if (res == nil) or (res < tonumber(ARGV[3])) then
    redis.call('zadd', KEYS[1], ARGV[2], ARGV[4])
    redis.call('expire', KEYS[1], ARGV[1]/1000)
    return 0
else
    return 1
end

$1
1
$35
SW_5439372283c520cb9172f86d6ce64b4c
$6
300000
$13
1726323097695
$1
1
$19
1834958188427399168
*3
$3
SET
$33
SP_FRE_ricardo7chang@gmail.com_40
$1
1
*3
$9
PEXPIREAT
$33
SP_FRE_ricardo7chang@gmail.com_40
$13
1726329599734
*2
$3
DEL
$35
SW_5439372283c520cb9172f86d6ce64b4c
*8
$4
EVAL
$559
--KEYS[1]: 限流 key
--ARGV[1]: 限流窗口,毫秒
--ARGV[2]: 当前时间戳（作为score）
--ARGV[3]: 阈值
--ARGV[4]: score 对应的唯一value
-- 1\. 移除开始时间窗口之前的数据
redis.call('zremrangeByScore', KEYS[1], 0, ARGV[2]-ARGV[1])
-- 2\. 统计当前元素数量
local res = redis.call('zcard', KEYS[1])
-- 3\. 是否超过阈值
if (res == nil) or (res < tonumber(ARGV[3])) then
    redis.call('zadd', KEYS[1], ARGV[2], ARGV[4])
    redis.call('expire', KEYS[1], ARGV[1]/1000)
    return 0
else
    return 1
end

$1
1
$35
SW_5439372283c520cb9172f86d6ce64b4c
$6
300000
$13
1726325890622
$1
1
$19
1834969901444943872
*3
$3
SET
$33
SP_FRE_ricardo7chang@gmail.com_40
$1
2
*3
$9
PEXPIREAT
$33
SP_FRE_ricardo7chang@gmail.com_40
$13
1726329599597
*2
$3
DEL
$35
SW_5439372283c520cb9172f86d6ce64b4c
*2
$6
SELECT
$1
0
*2
$3
DEL
$33
SP_FRE_ricardo7chang@gmail.com_40
